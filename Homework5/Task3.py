# Задача 3. Продвинутая функция sum
# Как вы знаете, в Python есть полезная функция sum, которая умеет находить
# сумму элементов списков. Иногда базовых возможностей функций не хватает
# для работы и приходится их усовершенствовать.
# Напишите свою функцию sum, которая должна быть более гибкой, чем
# стандартная. Она должна уметь складывать числа:
# ● из списка списков,
# ● набора параметров.
# Основной код оставьте пустым или закомментированным (используйте его
# только для тестирования).
# Примеры вызовов функции
# sum([[1, 2, [3]], [1], 3])
# Ответ в консоли: 10
# sum(1, 2, 3, 4, 5)
# Ответ в консоли: 15


def my_sum(*args):
    total_sum = 0  # Инициализация переменной для хранения суммы
    for i_elem in args:
        # Проверка, является ли элемент целым числом
        if isinstance(i_elem, int):
            total_sum += i_elem  # Добавление числа к общей сумме
        # Проверка, является ли элемент списком или кортежем
        elif isinstance(i_elem, (list, tuple)):
            # Рекурсивный вызов функции для суммирования элементов внутри списка или кортежа
            for x in i_elem:
                total_sum += my_sum(x)
        return total_sum


# Основной код для тестирования
# print(my_sum([[1, 2, [3]], [1], 3])) # Ожидаемый результат: 10
# print(my_sum(1, 2, 3, 4, 5)) # Ожидаемый результат: 15
